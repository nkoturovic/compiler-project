/* For more infomation, look at official bison 
 * (c++ parser section) documentation */
%{
#include <iostream>
#include <string>
#include <vector>
#include <memory>
#include <cstring>
#include "../include/third_party/polymorphic_value.h"
#include "../include/driver.hpp"
#include "../include/ast/ast.hpp"
#include "../include/lang/data_types.hpp"
#include "../include/lang/operators.hpp"
#include "../include/structs.hpp"

/* Polymorphic expression constructor (shortening name) */
inline auto poly_expr(auto derived) {
    return jbcoe::polymorphic_value<ast::Expression>(derived);
}

inline auto poly_type(auto derived) {
    return jbcoe::polymorphic_value<lang::DataType>(derived);
}

/* Syntax error function */
void yy::parser::error(const location_type& l, const string& msg) {
	driver.error(l, msg);
}
%}

%language "c++"
%locations

%define api.value.type variant
%define api.token.constructor
%define parse.trace

/* Better error messages */
%define parse.error verbose

/* Pass to flex */
%code requires {
class Driver;
using namespace std;
using namespace cpl;
}
%param { Driver &driver }

/* Token definitions */
%token
eof_token 0 "end of file"	
print_token "print"          
if_token "if"          
while_token "while"          
void_kw_token "void"          
int_kw_token "int"          
double_kw_token "double"          
char_kw_token "char"          
crl_lparen_token "{"            
crl_rparen_token "}"            
sqr_lparen_token "["            
sqr_rparen_token "]"            
plus_token "+"    
minus_token "-"   
asterix_token "*"                   
slash_token "/"                   
backslash_token "\\"                   
percent_token "%"                   
lparen_token "("  
rparen_token ")"  
assign_token "="  
eq_token "=="  
lt_token "<"      
gt_token ">"      
leq_token "<="      
geq_token ">="      
shl_token "<<"      
shr_token ">>"      
semicol_token ";" 
dot_token "." 
col_token ":" 
comma_token ","   
backtick_token "`"   
dbl_amp_token "&&"
excl_token "!"
tilde_token "~"
amp_token "&"
dbl_pipe_token "||"
pipe_token "|"

/* No union needed, we are using bison variant */
%token <string> id_token "identifier";
%token <int> int_token "Integer literal";
%token <double> double_token "Floating point literal";
%token <char> char_token "Char literal";
%token <string> string_token "String literal";

%left "="
%left "&&"
%left "||"

%left "==" "!="

%left "|"
%left "^"
%left "&"

%left "<" "<=" ">" ">="

%left "<<" ">>"

%left "+" "-"
%left "*" "/" "%"

%nonassoc "!" "~"
%nonassoc UMINUS UPLUS
%nonassoc CALL

%type <jbcoe::polymorphic_value<ast::Statement>> Stmt Sprt_stmt
%type <jbcoe::polymorphic_value<ast::Expression>> Expr Literal

%%

Program : Block {}


Block : "{" List_of_stmts "}"
      | "{" /* Empty Block */ "}"
      ;


List_of_stmts : List_of_stmts Stmt { }
              | Stmt { }
              ;

Stmt : Sprt_stmt ";" { } /* Stmt that ends with separator  */
     | ";" { } /* Empty statement */ {}
     | Block { }
     ;

Sprt_stmt : Expr { 
            $1->interpret(); 
          }
          | print_token "(" List_of_expr ")" {}
          | Type { }
	      ;

Type : Basic_type { }
     | Pointer_type { }
     ;

Basic_type : "void" { }
           | "char" { }
           | "int" { }
           | "double" { }
           ;

Pointer_type :  Type "*" { }
             ;


Expr : "(" Expr ")" { $$ = move($2); }
     | Expr "+" Expr { $$ = poly_expr(ast::BinOp(@$, lang::BinOpId::PLUS, move($1), move($3))); }
     | Expr "-" Expr { $$ = poly_expr(ast::BinOp(@$, lang::BinOpId::MINUS, move($1), move($3))); }
     | Expr "*" Expr { $$ = poly_expr(ast::BinOp(@$, lang::BinOpId::MUL, move($1), move($3))); }
     | Expr "/" Expr { $$ = poly_expr(ast::BinOp(@$, lang::BinOpId::DIV, move($1), move($3))); }
     | Expr "&&" Expr { $$ = poly_expr(ast::BinOp(@$, lang::BinOpId::L_AND, move($1), move($3))); }
     | Expr "||" Expr { $$ = poly_expr(ast::BinOp(@$, lang::BinOpId::L_OR, move($1), move($3))); }
     | Expr "&" Expr { $$ = poly_expr(ast::BinOp(@$, lang::BinOpId::B_AND, move($1), move($3))); }
     | Expr "|" Expr { $$ = poly_expr(ast::BinOp(@$, lang::BinOpId::B_OR, move($1), move($3))); }
     | Expr "^" Expr { $$ = poly_expr(ast::BinOp(@$, lang::BinOpId::B_XOR, move($1), move($3))); }
     | Expr "<" Expr { $$ = poly_expr(ast::BinOp(@$, lang::BinOpId::LT, move($1), move($3))); }
     | Expr ">" Expr { $$ = poly_expr(ast::BinOp(@$, lang::BinOpId::GT, move($1), move($3))); }
     | Expr "<=" Expr { $$ = poly_expr(ast::BinOp(@$, lang::BinOpId::LEQ, move($1), move($3))); }
     | Expr ">=" Expr { $$ = poly_expr(ast::BinOp(@$, lang::BinOpId::GEQ, move($1), move($3))); }
     | Expr "<<" Expr { $$ = poly_expr(ast::BinOp(@$, lang::BinOpId::SHL, move($1), move($3))); }
     | Expr ">>" Expr { $$ = poly_expr(ast::BinOp(@$, lang::BinOpId::SHR, move($1), move($3))); }
     | Expr "==" Expr { $$ = poly_expr(ast::BinOp(@$, lang::BinOpId::EQ, move($1), move($3))); }
     | Expr "!=" Expr { $$ = poly_expr(ast::BinOp(@$, lang::BinOpId::NEQ, move($1), move($3))); }
     | Expr "%" Expr { $$ = poly_expr(ast::BinOp(@$, lang::BinOpId::MOD, move($1), move($3)));  }
     | id_token "[" Expr "]" { }
     | "!" Expr { $$ = poly_expr(ast::UnOp(@$, lang::UnOpId::L_NOT, move($2))); }
     | "~" Expr { $$ = poly_expr(ast::UnOp(@$, lang::UnOpId::B_NOT, move($2))); }
     | Func_call %prec CALL { }
     | "-" Expr %prec UMINUS { $$ = poly_expr(ast::UnOp(@$, lang::UnOpId::MINUS, move($2))); }
     | "+" Expr %prec UPLUS { $$ = poly_expr(ast::UnOp(@$, lang::UnOpId::PLUS, move($2))); }
     | id_token { $$ = poly_expr(ast::Literal(@$, lang::Data(poly_type(lang::BasicType(lang::DataTypeId::INT)), 0)));  }
     | Literal { $$ = move($1); }
     ;

Literal : char_token { $$ = poly_expr(ast::Literal(@$, lang::Data(poly_type(lang::BasicType(lang::DataTypeId::CHAR)), $1))); }
        | int_token { $$ = poly_expr(ast::Literal(@$, lang::Data(poly_type(lang::BasicType(lang::DataTypeId::INT)), $1))); }
        | double_token { $$ = poly_expr(ast::Literal(@$, lang::Data(poly_type(lang::BasicType(lang::DataTypeId::DOUBLE)), $1))); }
        | string_token { $$ = poly_expr(ast::Literal(@$, lang::Data(poly_type(lang::PointerType(poly_type(lang::BasicType(lang::DataTypeId::CHAR)))), "REPLACE ME"))); 
        }
        ;


Func_call : id_token "(" Parameters ")" { }

Parameters : List_of_expr { }
           ;

List_of_expr : List_of_expr "," Expr {}
             | Expr {}
             ;

LVal : id_token { }
     | id_token "[" Expr "]" { }
     ;

%%

int main(int argc, char * argv[])
{
	bool read_from_file = false;
	Driver driver;
    Driver::set_active_instance(driver);

	int i;
	for (i = 1; i < argc; i++) {
		if (argv[i] == string("-p")) {
			driver.trace_parsing = true;
		} else if (argv[i] == string("-s")) {
			driver.trace_scanning = true;
		} else {
			read_from_file = true;
		}
	}

	if (read_from_file)
		driver.parse(argv[i-1]);
	else
		driver.parse();

	return 0;
}
