/* For more infomation, look at official bison 
 * (c++ parser section) documentation */
%{
#include <iostream>
#include <string>
#include <memory>
#include "../include/driver.hpp"
#include "../include/ast/ast.hpp"

/* Syntax error function */
void yy::parser::error(const location_type& l, const std::string& msg) {
	driver.error(l, msg);
}
%}

%language "c++"
%locations

%define api.value.type variant
%define api.token.constructor
%define parse.trace

/* Better error messages */
%define parse.error verbose

/* Pass to flex */
%code requires {
class Driver;
}
%param { Driver &driver }

/* Token definitions */
%token
eof_token 0 "end of file"	
print_token "print"          
if_token "if"          
while_token "while"          
int_kw_token "int"          
bool_kw_token "bool"          
double_kw_token "double"          
char_kw_token "char"          
crl_lparen_token "{"            
crl_rparen_token "}"            
sqr_lparen_token "["            
sqr_rparen_token "]"            
plus_token "+"    
minus_token "-"   
asterix_token "*"                   
slash_token "/"                   
backslash_token "\\"                   
percent_token "%"                   
lparen_token "("  
rparen_token ")"  
assign_token "="  
eq_token "=="  
lt_token "<"      
gt_token ">"      
leq_token "<="      
geq_token ">="      
shl_token "<<"      
shr_token ">>"      
semicol_token ";" 
dot_token "." 
col_token ":" 
comma_token ","   
backtick_token "`"   
dbl_amp_token "&&"
excl_token "!"
tilde_token "~"
amp_token "&"
dbl_pipe_token "||"
pipe_token "|"

/* No union needed, we are using variant */
%token <std::string> id_token "identifier";
%token <int> int_token "Integer literal";
%token <double> real_token "Floating point literal";
%token <char> char_token "Char literal";
%token <std::string> string_token "String literal";

%left "="
%left "&&"
%left "||"

%left "==" "!="

%left "|"
%left "^"
%left "&"

%left "<" "<=" ">" ">="

%left "<<" ">>"

%left "+" "-"
%left "*" "/" "%"

%nonassoc "!" "~"
%nonassoc UMINUS UPLUS
%nonassoc CALL "`"


%%
/* Consider maybe using std::swap instead of std::move everywhere 
 * because there is discussion about potential move problems with 
 * bison variant types */

Program : Block {}


Block : "{" List_of_stmts "}"
      | "{" /* Empty Block */ "}"
      ;


List_of_stmts : List_of_stmts Stmt { }
              | Stmt {}
              ;

Stmt : Sprt_stmt ";" { } /* Stmt that ends with separator  */
     | ";" { } /* Empty statement */ {}
     | Block { }
     ;

Sprt_stmt : Expr { }
          | print_token "(" List_of_expr ")" {}
          | Type id_token "=" Expr { } 
          | LVal "=" Expr { }
	      ;

Type : Primitive_type
     ;

Primitive_type : "char" | "int" | "double";
           ;

Expr : "(" Expr ")" {}
     | Expr "+" Expr {}
     | Expr "-" Expr {}
     | Expr "*" Expr {}
     | Expr "/" Expr {}
     | Expr "&&" Expr { }
     | Expr "||" Expr { }
     | Expr "&" Expr { }
     | Expr "|" Expr { }
     | Expr "^" Expr { }
     | Expr "<" Expr { }
     | Expr ">" Expr { }
     | Expr "<=" Expr { }
     | Expr ">=" Expr { }
     | Expr "<<" Expr { }
     | Expr ">>" Expr { }
     | Expr "==" Expr { }
     | Expr "!=" Expr { }
     | Expr "%" Expr { }
     | id_token "[" Expr "]" { }
     | "!" Expr { }
     | "~" Expr { }
     | Func_call %prec CALL { }
     | Expr "`" id_token "`" Expr { }
     | "-" Expr %prec UMINUS { }
     | "+" Expr %prec UPLUS { }
     | id_token { }
     | Literal { }
     ;

Literal : char_token {}
        | int_token {}
        | real_token {}
        ;


Func_call : id_token "(" Parameters ")" { }

Parameters : List_of_expr { }
           ;

List_of_expr : List_of_expr "," Expr {}
             | Expr {}
             ;

LVal : id_token { }
     | id_token "[" Expr "]" { }
     ;

%%

int main(int argc, char * argv[])
{
	bool read_from_file = false;
	Driver driver;

	int i;
	for (i = 1; i < argc; i++) {
		if (argv[i] == std::string ("-p")) {
			driver.trace_parsing = true;
		} else if (argv[i] == std::string ("-s")) {
			driver.trace_scanning = true;
		} else {
			read_from_file = true;
		}
	}

	if (read_from_file)
		driver.parse(argv[i-1]);
	else
		driver.parse();

	return 0;
}
