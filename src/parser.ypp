/* For more infomation, look at official bison 
 * (c++ parser section) documentation */
%{
#include <iostream>
#include <string>
#include <vector>
#include "../include/third_party/polymorphic_value.h"
#include "../include/driver.hpp"
#include "../include/ast/ast.hpp"
#include "../include/lang/types.hpp"
#include "../include/lang/operators.hpp"
#include "../include/structs.hpp"
#include "../include/codegen/codegen.hpp"

/* Syntax error function */
void yy::parser::error(const location_type& l, const string& msg) {
	driver.error(l, msg);
}
%}

%language "c++"
%locations

%define api.value.type variant
%define api.token.constructor
%define parse.trace

/* Better error messages */
%define parse.error verbose

/* Pass to flex */
%code requires {
    class Driver;
    using namespace std;
    using namespace compiler;

    template <typename T>
    using poly_val = jbcoe::polymorphic_value<T>;
    using poly_expr = poly_val<ast::Expression>;
    using poly_type = poly_val<lang::types::Type>;
}

%param { Driver &driver }

/* Token definitions */
%token
eof_token 0 "end of file"	
print_token "print"          
if_token "if"          
else_token "else"
while_token "while"          
void_kw_token "void"          
int_kw_token "int"          
double_kw_token "double"          
char_kw_token "char"          
return_token "return"          
crl_lparen_token "{"            
crl_rparen_token "}"            
sqr_lparen_token "["            
sqr_rparen_token "]"            
plus_token "+"    
minus_token "-"   
asterix_token "*"                   
slash_token "/"                   
backslash_token "\\"                   
percent_token "%"                   
lparen_token "("  
rparen_token ")"  
assign_token "="  
eq_token "=="  
lt_token "<"      
gt_token ">"      
leq_token "<="      
geq_token ">="      
shl_token "<<"      
shr_token ">>"      
semicol_token ";" 
dot_token "." 
col_token ":" 
comma_token ","   
backtick_token "`"   
dbl_amp_token "&&"
excl_token "!"
tilde_token "~"
amp_token "&"
dbl_pipe_token "||"
pipe_token "|"

/* No union needed, we are using bison variant */
%token <string> id_token "identifier";
%token <int> int_token "Integer literal";
%token <double> double_token "Floating point literal";
%token <char> char_token "Char literal";
%token <string> string_token "String literal";

%type <poly_val<ast::OuterDecl>> Outer_decl Func_def
%type <poly_val<ast::Statement>> Stmt Sprt_stmt Block If_else_stmt
%type <poly_val<ast::Expression>> Expr Literal Func_call
%type <poly_type> Type Basic_type Pointer_type
%type <vector<poly_val<ast::OuterDecl>>> Seq_of_outer_decl Program
%type <vector<poly_val<ast::Statement>>> List_of_stmts 
%type <vector<poly_val<ast::Expression>>> List_of_expr Parameters
%type <vector<structs::FuncArg>> List_of_args
%type <structs::StrOptExprPair> Variable_decl
%type <vector<structs::StrOptExprPair>> Variable_decl_list

%left "="
%left "&&"
%left "||"

%left "==" "!="

%left "|"
%left "^"
%left "&"

%left "<" "<=" ">" ">="

%left "<<" ">>"

%left "+" "-"
%left "*" "/" "%"

%nonassoc "!" "~"
%nonassoc UMINUS UPLUS
%nonassoc CALL

/* If_statement precedence */
%precedence NOELSE
%precedence ELSE

%%


/* Program is sequence of outer declarations ended by EOF  */
Program : Seq_of_outer_decl eof_token { 
            $$ = move($1); 
            // AST to_string -> cout
            // for (const poly_val<ast::OuterDecl> &pval_decl : $$) {
            //    std::cout << *pval_decl;
            // }

            for (const poly_val<ast::OuterDecl> &pval_decl : $$) {
                pval_decl->codegen();
            }

        }
        ;

Seq_of_outer_decl : Seq_of_outer_decl Outer_decl { $$ = move($1); $$.push_back($2); }
        | Outer_decl { $$ = vector<poly_val<ast::OuterDecl>>(); $$.push_back(move($1)); }
        ;

Outer_decl : Func_def { $$ = move($1); }
           ;

Func_def : Type id_token "(" List_of_args ")" Block { 
            ast::Block &body = dynamic_cast<ast::Block&>(*$6);
            yy::location loc = @$; loc.begin = @1.begin; loc.end = @5.end;
            $$ = poly_val<ast::OuterDecl>(ast::FuncDef(@$, ast::FuncDecl(loc,structs::FuncProto{move($2), move($4), move($1)}), move(body)));
         } 
         ;

List_of_args : List_of_args "," Type id_token { $$ = move($1); $$.push_back({move($3), move($4)}); }
             | Type id_token { $$ = std::vector<structs::FuncArg>(); $$.push_back({move($1), move($2)}); }
             | /* eps */ { $$ = std::vector<structs::FuncArg>(); }
             ;
             

Block : "{" List_of_stmts "}" { $$ = poly_val<ast::Statement>(ast::Block(@$, move($2))); }
      | "{" /* Empty Block */ "}" { $$ = poly_val<ast::Statement>(ast::Block(@$, {} )); }
      ;


List_of_stmts : List_of_stmts Stmt { $$ = move($1); $$.push_back(move($2)); }
              | Stmt { $$ = vector<poly_val<ast::Statement>>(); $$.push_back(move($1));}
              ;

Stmt : Sprt_stmt ";" { $$ = move($1); } /* Stmt that ends with separator  */
     | ";" { } /* TODO: Empty statement */ {}
     | Block { $$ = move($1); }
     | If_else_stmt { $$ = move($1); }
     ;

Sprt_stmt : Expr { 
            $$ = poly_val<ast::Statement>(move($1));
          }
          | print_token "(" List_of_expr ")" {}
          | Type Variable_decl_list { $$ = poly_val<ast::Statement>(ast::VariableDecl(@$, move($1), move($2))); }
          | "return" Expr { $$ = poly_val<ast::Statement>(ast::ReturnStmt(@$, move($2))); }
	      ;

/********** Variable declaration **********/
Variable_decl_list : Variable_decl_list "," Variable_decl { $$ = $1; $$.push_back(move($3)); }
                   | Variable_decl { $$ = {}; $$.push_back(move($1)); }
                   ;

Variable_decl : id_token { $$ = structs::StrOptExprPair{$1, std::nullopt}; }
         | id_token "=" Expr { $$ = structs::StrOptExprPair{$1, $3}; }
         ;

Type : Basic_type { $$ = move($1); }
     | Pointer_type { $$ = move($1); }
     ;

Basic_type : "void" { $$ = poly_type(lang::types::VoidType()); }
           | "char" { $$ = poly_type(lang::types::CharType()); }
           | "int" { $$ = poly_type(lang::types::IntType());  }
           | "double" { $$ = poly_type(lang::types::DoubleType()); }
           ;

Pointer_type :  Type "*" { $$ = poly_type(lang::types::PointerType($1)); }
             ;


Expr : "(" Expr ")" { $$ = move($2); }
     | Expr "+" Expr { $$ = poly_expr(ast::BinOp(@$, lang::operators::BinOpId::PLUS, move($1), move($3))); }
     | Expr "-" Expr { $$ = poly_expr(ast::BinOp(@$, lang::operators::BinOpId::MINUS, move($1), move($3))); }
     | Expr "*" Expr { $$ = poly_expr(ast::BinOp(@$, lang::operators::BinOpId::MUL, move($1), move($3))); }
     | Expr "/" Expr { $$ = poly_expr(ast::BinOp(@$, lang::operators::BinOpId::DIV, move($1), move($3))); }
     | Expr "&&" Expr { $$ = poly_expr(ast::BinOp(@$, lang::operators::BinOpId::L_AND, move($1), move($3))); }
     | Expr "||" Expr { $$ = poly_expr(ast::BinOp(@$, lang::operators::BinOpId::L_OR, move($1), move($3))); }
     | Expr "&" Expr { $$ = poly_expr(ast::BinOp(@$, lang::operators::BinOpId::B_AND, move($1), move($3))); }
     | Expr "|" Expr { $$ = poly_expr(ast::BinOp(@$, lang::operators::BinOpId::B_OR, move($1), move($3))); }
     | Expr "^" Expr { $$ = poly_expr(ast::BinOp(@$, lang::operators::BinOpId::B_XOR, move($1), move($3))); }
     | Expr "<" Expr { $$ = poly_expr(ast::BinOp(@$, lang::operators::BinOpId::LT, move($1), move($3))); }
     | Expr ">" Expr { $$ = poly_expr(ast::BinOp(@$, lang::operators::BinOpId::GT, move($1), move($3))); }
     | Expr "<=" Expr { $$ = poly_expr(ast::BinOp(@$, lang::operators::BinOpId::LEQ, move($1), move($3))); }
     | Expr ">=" Expr { $$ = poly_expr(ast::BinOp(@$, lang::operators::BinOpId::GEQ, move($1), move($3))); }
     | Expr "<<" Expr { $$ = poly_expr(ast::BinOp(@$, lang::operators::BinOpId::SHL, move($1), move($3))); }
     | Expr ">>" Expr { $$ = poly_expr(ast::BinOp(@$, lang::operators::BinOpId::SHR, move($1), move($3))); }
     | Expr "==" Expr { $$ = poly_expr(ast::BinOp(@$, lang::operators::BinOpId::EQ, move($1), move($3))); }
     | Expr "!=" Expr { $$ = poly_expr(ast::BinOp(@$, lang::operators::BinOpId::NEQ, move($1), move($3))); }
     | Expr "%" Expr { $$ = poly_expr(ast::BinOp(@$, lang::operators::BinOpId::MOD, move($1), move($3)));  }
     | id_token "=" Expr { $$ = poly_expr(ast::VariableAssign(@$, move($1), move($3))); }
     | id_token "[" Expr "]" { }
     | "!" Expr { $$ = poly_expr(ast::UnOp(@$, lang::operators::UnOpId::L_NOT, move($2))); }
     | "~" Expr { $$ = poly_expr(ast::UnOp(@$, lang::operators::UnOpId::B_NOT, move($2))); }
     | Func_call %prec CALL { $$ = move($1); }
     | "-" Expr %prec UMINUS { $$ = poly_expr(ast::UnOp(@$, lang::operators::UnOpId::MINUS, move($2))); }
     | "+" Expr %prec UPLUS { $$ = poly_expr(ast::UnOp(@$, lang::operators::UnOpId::PLUS, move($2))); }
     | id_token { $$ = poly_expr(ast::Variable(@$, move($1))); }
     | Literal { $$ = move($1); }
     ;

Literal : char_token { $$ = poly_expr(ast::CharLiteral(@$, $1)); }
        | int_token { $$ = poly_expr(ast::IntLiteral(@$, $1)); }
        | double_token { $$ = poly_expr(ast::DoubleLiteral(@$, $1)); }
        | string_token { $$ = poly_expr(ast::StringLiteral(@$, $1)); }
        ;


Func_call : id_token "(" Parameters ")" { $$ = poly_expr(ast::FuncCall(@$, move($1), move($3))); }

Parameters : List_of_expr { $$ = move($1); };
           | /* eps */ { $$ = {}; }

List_of_expr : List_of_expr "," Expr { $$ = $1; $$.push_back(move($3)); }
             | Expr { $$ = {}; $$.push_back(move($1)); }
             ;

/* Program flow control */
If_else_stmt : "if" "(" Expr ")" Stmt %prec NOELSE { $$ = poly_val<ast::Statement>(ast::IfElse(@$, move($3), move($5), {nullopt})); }
             | "if" "(" Expr ")" Stmt "else" Stmt %prec ELSE { $$ = poly_val<ast::Statement>(ast::IfElse(@$, move($3), move($5), move($7))); }
             ;


/* Lval : id_token { }
*      | id_token "[" Expr "]" { }
*      ;
*/

%%


int main(int argc, char * argv[])
{
    bool read_from_file = false;
    Driver driver;
    Driver::set_active_instance(driver);
    
    int i;
    for (i = 1; i < argc; i++) {
        if (argv[i] == string("-p")) {
            driver.trace_parsing = true;
        } else if (argv[i] == string("-s")) {
            driver.trace_scanning = true;
        } else {
            read_from_file = true;
        }
    }

    if (read_from_file)
        driver.parse(argv[i-1]);
    else
    driver.parse();

    std::vector<structs::Error> ast_errors = ast::AstNode::get_errors();
    std::vector<structs::Error> ast_warnings = ast::AstNode::get_warnings();

    if (!ast_errors.empty()) {
        /* Print all errors collected from the Ast */
        for (const structs::Error& err : ast_errors) {
            driver.error(err.loc, err.msg);
        }
    }

    if (!ast_warnings.empty()) {
        /* Print all warnigns collected from the Ast */
        for (const structs::Error& err : ast_warnings) {
            driver.warning(err.loc, err.msg);
        }
    }

    if (ast_errors.empty()) {
        codegen::global::module->print(llvm::outs(), nullptr);
    }

	return 0;
}
